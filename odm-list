#!/usr/bin/env python

# This file is part of onedrive-magic and distributed under the terms of the
# MIT license. See COPYING.

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

import datetime
import json
import os
import sys

from kitchen.text.converters import getwriter

from util import cli, quickxorhash

writer = getwriter('utf8')
sys.stdout = writer(sys.stdout)
sys.stderr = writer(sys.stderr)

cli = cli.CLI(['--dest', '--limit', '--exclude', '--start', 'file', 'action'])
client = cli.client

ts_start = datetime.datetime.now()

with open(cli.args.file, 'rb') as f:
    items = json.load(f)

if cli.args.action in ('download-items', 'download-estimate', 'list-filenames', 'verify-items'):
    destdir = cli.args.dest if cli.args.dest else '/var/tmp'
    exclude = []
    if cli.args.exclude:
        with open(cli.args.exclude, 'rb') as f:
            exclude = [e.rstrip() for e in list(f)]

    size = 0
    count = 0
    started = not cli.args.start

    for item in items:
        if not started:
            if item['fullpath'] == cli.args.start:
                started = True
            else:
                cli.logger.debug(u'Start point not reached, skipping item {}'.format(item['fullpath']))
                continue

        if item['fullpath'] in exclude:
            cli.logger.debug(u'Skipping excluded item {}'.format(item['fullpath']))
            continue

        if cli.args.limit:
            if not item['fullpath'].startswith(cli.args.limit):
                cli.logger.debug(u'Skipping non-matching item {}'.format(item['fullpath']))
                continue

        if 'file' not in item:
            if 'folder' not in item:
                cli.logger.debug(u'Skipping non-file {}'.format(item['fullpath']))
            continue

        cli.logger.debug(u'Working on {}'.format(item['fullpath']))

        dest = ''.join((destdir, item['fullpath']))
        if cli.args.action == 'download-items':
            if client.verify_file(
                dest,
                item['size'],
                item['file']['hashes']['quickXorHash'],
            ):
                cli.logger.info('Verified {}'.format(dest))
            else:
                cli.logger.info(u'Downloading {} to {}'.format(item['fullpath'], dest))
                download_hash = client.download_file(
                    item['parentReference']['driveId'],
                    item['id'],
                    dest,
                )
                if download_hash != item['file']['hashes']['quickXorHash']:
                    cli.logger.info(u'Failed to verify {}'.format(dest))
        elif cli.args.action == 'verify-items':
            if client.verify_file(
                dest,
                item['size'],
                item['file']['hashes']['quickXorHash']
            ):
                cli.logger.info(u'Verified {}'.format(dest))
            else:
                cli.logger.warn(u'Failed to verify {}'.format(dest))
        elif cli.args.action == 'list-filenames':
            print(item['fullpath'])

        size += item['size']
        count += 1

    if cli.args.action == 'download-estimate':
        delta_msg = 'estimated time {!s}'.format(
            datetime.timedelta(seconds = int(count + (size / 15294809)))
        )
    else:
        delta_msg = 'elapsed time {!s}'.format(datetime.datetime.now() - ts_start)

    cli.logger.info('{:.2f} MiB across {} items, {}'.format(
        size / (1024 ** 2),
        count,
        delta_msg
    ))

else:
    print('Unsupported action {}'.format(cli.args.action), file = sys.stderr)
    sys.exit(1)
